patapps <- read.table("/home/vsubhashini/courses/dm/ee380l-ghosh-project/data/pyAnalysisOutput/relPatApp-TopicDist-4R-v1.data", sep=",")
library("car")
patapps.lda <- lda(patapps$V1 ~ patapps$V2 + patapps$V3 + patapps$V4 + patapps$V5 + patapps$V6 + patapps$V7 +patapps$V8 + patapps$V9 + patapps$V10 + patapps$V11 + patapps$V12 + patapps$V13 +patapps$V14 + patapps$V15 + patapps$V16)
patapps.lda$scaling[,1]
standardisedconcentrations <- as.data.frame(scale(patapps[2:16]))
patapps.lda.values <- predict(patapps.lda, standardisedconcentrations)
confMatrix <- table(patapps$V1, patapps.lda.values$class)
confMatrix
data <- read.delim("/home/vsubhashini/courses/dm/ee380l-ghosh-project/data/pyAnalysisOutput/relPatApp-TMdist-4R-v1.data",sep=",")
library(e1071)
data <- read.delim("/home/vsubhashini/courses/dm/ee380l-ghosh-project/data/pyAnalysisOutput/relPatApp-TMdist-4R-v1.data",sep=",")
patappsvm <- svm(Rel ~ ., data)
patappsvm.pred <- predict(patappsvm,data)
svmTab=table(patappsvm.pred, data$Rel)
svmTab
quit
q()
library("tm")  
candidates <- c("unwanted", "relevant")
pathname <- "/home/vsubhashini/courses/dm/ee380l-ghosh-project/data/patents/full10kList/relatedPatApps"
options(stringsAsFactors=FALSE)
#clean Text
cleanCorpus <- function(corpus) {
  corpus.tmp <- tm_map(corpus, removePunctuation)
  corpus.tmp <- tm_map(corpus.tmp, stripWhitespace)
  corpus.tmp <- tm_map(corpus.tmp, tolower)
  corpus.tmp <- tm_map(corpus.tmp, removeWords, stopwords("english"))
  corpus.tmp <- tm_map(corpus.tmp, removeNumbers)
  return(corpus.tmp)  
}
reltxt <- system.file("texts", "library("tm")  
candidates <- c("unwanted", "relevant")
pathname <- "/home/vsubhashini/courses/dm/ee380l-ghosh-project/data/patents/full10kList/relatedPatApps"
options(stringsAsFactors=FALSE)
#clean Text
cleanCorpus <- function(corpus) {
  corpus.tmp <- tm_map(corpus, removePunctuation)
  corpus.tmp <- tm_map(corpus.tmp, stripWhitespace)
  corpus.tmp <- tm_map(corpus.tmp, tolower)
  corpus.tmp <- tm_map(corpus.tmp, removeWords, stopwords("english"))
  corpus.tmp <- tm_map(corpus.tmp, removeNumbers)
  return(corpus.tmp)  
reltxt <- system.file("texts", "relatedPatApps/relevant", package="tm")
(relCorp <- Corpus(DirSource(reltxt, encoding = "UTF-8"), readerControl = list(language = "en_US")))
(relCorp <- Corpus(DirSource(reltxt, encoding = "ANSI"), readerControl = list(language = "en_US")))
(relCorp <- Corpus(DirSource(reltxt, readerControl = list(language = "en_US")))
length(relCorp)
inspect(relCorp[1:5])
relCorp <- Corpus(DirSource(reltxt, readerControl = list(language = "en_US"))
)
relCorp <- Corpus(DirSource(reltxt, readerControl = list(language = "en_US")))
relCorp <- Corpus(DirSource(reltxt))
library("class")
library("plyr")
relCorp <- Corpus(DirSource(reltxt, encoding = "ANSI"), readerControl = list(language = "en_US")))
relCorp <- Corpus(DirSource(reltxt, encoding = "ANSI"), readerControl = list(language = "en_US"))
reltxt <- system.file("texts", "relatedPatApps/relevant", package="tm")
relCorp <- Corpus(DirSource(reltxt, encoding = "ANSI"), readerControl = list(language = "en_US"))
relCorp <- Corpus(DirSource("/home/vsubhashini/courses/dm/ee380l-ghosh-project/data/patents/full10kList/relatedPatApps/relevant"), readerControl = list(language = "en_US"))
summary(relCorp)
rel.cor.cl <- cleanCorpus(relCorp)
 pat.tdm <- TermDocumentMatrix(pat.cor.cl)
 pat.tdm <- removeSparseTerms(pat.tdm, 0.7)
 rel.tdm <- TermDocumentMatrix(rel.cor.cl)
 rel.tdm <- removeSparseTerms(rel.tdm, 0.7)
candidates <- c("unwanted", "relevant")
pathname <- "/home/vsubhashini/courses/dm/ee380l-ghosh-project/data/patents/full10kList/relatedPatApps"
rm(pat.tdm)
rm(relCorp)
rm(rel.tdm)
rm(rel.cor.cl)
candidates <- c("unwanted", "relevant")
pathname <- "/home/vsubhashini/courses/dm/ee380l-ghosh-project/data/patents/full10kList/relatedPatApps"
generateTDM <- function(cand, path) {
 pat.Dir <- sprintf("%s/%s", path, cand)
 #pat.cor <- Corpus(DirSource(directory = pat.Dir, encoding = "ANSI"))
 pat.cor <- Corpus(DirSource(pat.dir, readerControl = list(language = "en_US")))
 pat.cor.cl <- cleanCorpus(pat.cor)
 pat.tdm <- TermDocumentMatrix(pat.cor.cl)
 pat.tdm <- removeSparseTerms(pat.tdm, 0.6)
 result <- list(name = cand, tdm = pat.tdm)
}
tdm <- lapply(candidates, generateTDM, path = pathname)
generateTDM <- function(cand, path) {
 pat.Dir <- sprintf("%s/%s", path, cand)
 #pat.cor <- Corpus(DirSource(directory = pat.Dir, encoding = "ANSI"))
 pat.cor <- Corpus(DirSource(pat.dir), readerControl = list(language = "en_US"))
 pat.cor.cl <- cleanCorpus(pat.cor)
 pat.tdm <- TermDocumentMatrix(pat.cor.cl)
 pat.tdm <- removeSparseTerms(pat.tdm, 0.6)
 result <- list(name = cand, tdm = pat.tdm)
}
tdm <- lapply(candidates, generateTDM, path = pathname)
generateTDM <- function(cand, path) {
 pat.Dir <- sprintf("%s/%s", path, cand)
 #pat.cor <- Corpus(DirSource(directory = pat.Dir, encoding = "ANSI"))
 pat.cor <- Corpus(DirSource(pat.Dir), readerControl = list(language = "en_US"))
 pat.cor.cl <- cleanCorpus(pat.cor)
 pat.tdm <- TermDocumentMatrix(pat.cor.cl)
 pat.tdm <- removeSparseTerms(pat.tdm, 0.6)
 result <- list(name = cand, tdm = pat.tdm)
}
tdm <- lapply(candidates, generateTDM, path = pathname)
str(tdm)
bindCandidateToTDM <- function(tdm) {
  pat.mat <- t(data.matrix(tdm[["tdm"]]))
  pat.df <- as.data.frame(tdm, stringsAsFactors=FALSE)
  pat.df <- cbind(pat.df, rep(tdm[["name"]], nrow(pat.df)))
  colnames(pat.df)[ncol(pat.df)] <- "targetcandidate"
  return(pat.df)
}
candTDM <- lapply(tdm, bindCandidateToTDM)
bindCandidateToTDM <- function(tdm) {
  pat.mat <- t(data.matrix(tdm[["tdm"]]))
  pat.df <- as.data.frame(pat.mat, stringsAsFactors=FALSE)
  pat.df <- cbind(pat.df, rep(tdm[["name"]], nrow(pat.df)))
  colnames(pat.df)[ncol(pat.df)] <- "targetcandidate"
  return(pat.df)
}
candTDM <- lapply(tdm, bindCandidateToTDM)
str(candTDM)
dm.stack <- do.call(rbind.fill, candTDM)
tdm.stack(is.na(tdm.stack)) <- 0
tdm.stack <- do.call(rbind.fill, candTDM)
tdm.stack(is.na(tdm.stack)) <- 0
tdm.stack <- do.call(rbind.fill, candTDM)
tdm.stack[is.na(tdm.stack)] <- 0
head(tdm.stack)
rain.idx <- sample(nrow(tdm.stack), ceiling(nrows(tdm.stack)*0.7))
train.idx <- sample(nrow(tdm.stack), ceiling(nrows(tdm.stack)*0.7))
train.idx <- sample(nrow(tdm.stack), ceiling(nrow(tdm.stack)*0.7))
test.idx <- (1:nrow(tdm.stack)) [- trains.idx]
test.idx <- (1:nrow(tdm.stack)) [- train.idx]
head(test.idx)
head(train.idx)
head(train.idx)
# model - kNN
tdm.cand <- tdm.stack[, "targetcandidate"]
tdm.stack.nl <- tdm.stack[, 'colnames(tdm.stack) %in% "targetcandidate"]
knn.pred <- knn(tdm.stack.nl,[train.idx, ], tdm.stack.nl.test[test.idx, ], tdm.cand[train.idx])
)
knn.pred <- knn(tdm.stack.nl[train.idx, ], tdm.stack.nl[test.idx, ], tdm.cand[train.idx])
tdm.stack.nl <- tdm.stack[, !colnames(tdm.stack) %in% "targetcandidate"]
knn.pred <- knn(tdm.stack.nl[train.idx, ], tdm.stack.nl[test.idx, ], tdm.cand[train.idx])
# model - kNN
tdm.cand <- tdm.stack[, "targetcandidate"]
tdm.stack.nl <- tdm.stack[, 'colnames(tdm.stack) %in% "targetcandidate"]
knn.pred <- knn(tdm.stack.nl,[train.idx, ], tdm.stack.nl.test[test.idx, ], tdm.cand[train.idx])
conf.mat <- table("Predictions"=knn.pred, Actual=tdm.cand(test.idx))
conf.mat <- table("Predictions"=knn.pred, Actual=tdm.cand[test.idx])
conf.mat
(accuracy <- sum(diag.conf.mat) / length(text.idx) * 100)
(accuracy <- sum(diag(conf.mat)) / length(text.idx) * 100)
(accuracy <- sum(diag(conf.mat)) / length(text.idx) * 100)
head(test.idx)
(accuracy <- sum(diag(conf.mat)) / length(test.idx) * 100)
library(e1071)
svm.pred <- svm(tdm.stack.nl,[train.idx, ], tdm.stack.nl.test[test.idx, ], tdm.cand[train.idx])
svm.pred <- svm(tdm.stack.nl[train.idx, ], tdm.stack.nl[test.idx, ], tdm.cand[train.idx])
svmMod <- svm(tdm.cand[train.idx], tdm.stack.nl[train.idx])
svmMod <- svm(tdm.cand[train.idx] ~ ., tdm.stack.nl[train.idx])
head(tdm.cand)
head(tdm.stack)
svmMod <- svm(targetcandidate ~ .,data=tdm.stack)
library(lda)
patlda <- lda(targetcandidate ~ ., data=tdm.stack)
library("car")
patlda <- lda(targetcandidate ~ ., data=tdm.stack)
patlda <- lda(targetcandidate ~ ., data=tdm.stack, CV=TRUE)
ldaTab <- table(patlda$class, tdm.stack$targetcandidate)
ldaTab
ldaTab <- table("Predictions"=patlda$class, "Actual"+tdm.stack$targetcandidate)
ldaTab <- table("Predictions"=patlda$class, "Actual"=tdm.stack$targetcandidate)
ldaTab
patsvm <- svm(targetcandidate ~ ., data=tdm.stack)
patsvm <- svm(targetcandidate ~ ., data=tdm.stack, type="C-classification")
svmModel <- svm(tdm.stack.nl[train.idx], tdm.cand[train.idx])
svmModel <- svm(tdm.stack.nl[train.idx], tdm.cand[train.idx], type="C-classification")
head(tdm.stack.nl[train.idx])
knn.pred <- knn(tdm.stack.nl[train.idx, ], tdm.stack.nl[test.idx, ], tdm.cand[train.idx])
conf.mat <- table("Predictions"=knn.pred, Actual=tdm.cand[test.idx])
conf.mat
svmModel <- svm(tdm.stack.nl[train.idx, ], tdm.cand[train.idx], type="C-classification")
head(tdm.stack.nl[train.idx, ])
head(tdm.stack)
head(mtcars)
svmModel <- svm(as.factor(targetcandidate) ~ ., data=tdm.stack[train.idx])
svmModel <- svm(as.factor(targetcandidate) ~ ., data=tdm.stack[train.idx, ])
summary(svmModel)
pat.svmpred <- predict(svmModel)
confmat.svm <- table("Prediction"=pat.svmpred, "Actual"=tdm.cand[train.idx])
confmat.svm
pat.svmpred <- predict(svmModel, data=tdm.stack.nl[test.idx, ])
confmat.svm <- table("Prediction"=pat.svmpred, "Actual"=tdm.cand[train.idx])
confmat.svm
confmat.svm <- table("Prediction"=pat.svmpred, "Actual"=tdm.cand[test.idx])
svmModel <- svm(as.factor(targetcandidate) ~ ., data=tdm.stack[train.idx, ])
pattest.svmpred <- predict(svmModel, tdm.stack.nl[test.idx, ])
confmat.svm <- table("Prediction"=pattest.svmpred, "Actual"=tdm.cand[test.idx])
confmat.svm
#Build document-term matrix
generateDTM <- function(cand, path) {
 pat.Dir <- sprintf("%s/%s", path, cand)
 #pat.cor <- Corpus(DirSource(directory = pat.Dir, encoding = "ANSI"))
 pat.cor <- Corpus(DirSource(pat.Dir), readerControl = list(language = "en_US"))
 pat.cor.cl <- cleanCorpus(pat.cor)
 pat.dtm <- DocumentTermMatrix(pat.cor.cl)
 pat.dtm <- removeSparseTerms(pat.dtm, 0.3)
 result <- list(name = cand, dtm = pat.dtm)
}
dtm <- lapply(candidates, generateDTM, path = pathname)
bindCandidateToDTM <- function(dtm) {
  pat.mat <- data.matrix(dtm[["dtm"]])
  pat.df <- as.data.frame(dtm, stringsAsFactors=FALSE)
  pat.df <- cbind(pat.df, rep(dtm[["name"]], nrow(pat.df)))
  colnames(pat.df)[ncol(pat.df)] <- "targetcandidate"
  return(pat.df)
}
candDTM <- lapply(dtm, bindCandidateToDTM)
head(dtm)
bindCandidateToDTM <- function(dtm) {
  pat.mat <- data.matrix(dtm[["dtm"]])
  pat.df <- as.data.frame(pat.mat, stringsAsFactors=FALSE)
  pat.df <- cbind(pat.df, rep(dtm[["name"]], nrow(pat.df)))
  colnames(pat.df)[ncol(pat.df)] <- "targetcandidate"
  return(pat.df)
}
candDTM <- lapply(dtm, bindCandidateToDTM)
# Stack
dtm.stack <- do.call(rbind.fill, candDTM)
dtm.stack(is.na(dtm.stack)) <- 0
 
#hold-out
train.idx <- sample(nrow(dtm.stack), ceiling(nrow(dtm.stack)*0.7))
test.idx <- (1:nrow(dtm.stack)) [- train.idx]
dtm.stack[is.na(dtm.stack)] <- 0
train.idx <- sample(nrow(dtm.stack), ceiling(nrow(dtm.stack)*0.7))
test.idx <- (1:nrow(dtm.stack)) [- train.idx]
# model - kNN
dtm.cand <- dtm.stack[, "targetcandidate"]
dtm.stack.nl <- dtm.stack[, !colnames(dtm.stack) %in% "targetcandidate"]
knn.pred <- knn(dtm.stack.nl[train.idx, ], dtm.stack.nl[test.idx, ], dtm.cand[train.idx])
#accuracy
conf.mat <- table("Predictions"=knn.pred, Actual=dtm.cand[test.idx])
conf.mat
#SVM
svmModel <- svm(as.factor(targetcandidate) ~ ., data=dtm.stack[train.idx, ])
pat.svmpred <- predict(svmModel)
confmat.svm <- table("Prediction"=pat.svmpred, "Actual"=dtm.cand[train.idx])
confmat.svm
#predicting on test data
pattest.svmpred <- predict(svmModel, dtm.stack.nl[test.idx, ])
confmat.svm <- table("Prediction"=pattest.svmpred, "Actual"=dtm.cand[test.idx])
confmat.svm
260.0/297
length(test.idx)
q()
